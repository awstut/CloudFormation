AWSTemplateFormatVersion: 2010-09-09
Resources:

  AppVirtualPrivateCloud:
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: True
      EnableDnsHostnames: True
      InstanceTenancy: "default"
      Tags: 
        - Key: "CloudFormation"
          Value: ""
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-VPC"

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}


  IGWToVPC:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref AppVirtualPrivateCloud  


  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref AppVirtualPrivateCloud
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-west-1b"
      MapPublicIpOnLaunch: True
      Tags: 
      - Key: "Name"
        Value: !Sub "${AWS::StackName}-PublicSubnet1"     
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref AppVirtualPrivateCloud
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-west-1c"
      MapPublicIpOnLaunch: True
      Tags: 
      - Key: "Name"
        Value: !Sub "${AWS::StackName}-PublicSubnet2"  
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref AppVirtualPrivateCloud

  PublicRouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway    


  PublicRouteTableToSubnet1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableToSubnet2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable       

  PublicSubnetsNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref AppVirtualPrivateCloud
      Tags:
      - Key: "Name"
        Value: !Sub "${AWS::StackName}-PublicSubnetsNacl"  

  IngressPublicAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetsNacl
      Egress: False
      RuleNumber: '100'
      Protocol: "-1"
      CidrBlock: 0.0.0.0/0   
      RuleAction: allow
      
  EgressPublicAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetsNacl
      Egress: True
      RuleNumber: '100'
      Protocol: "-1"
      CidrBlock: 0.0.0.0/0   
      RuleAction: allow    

  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicSubnetsNacl
  PuhblicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicSubnetsNacl         

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref AppVirtualPrivateCloud
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "us-west-1b"
      Tags: 
      - Key: "Name"
        Value: !Sub "${AWS::StackName}-PrivateSubnet1"     
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref AppVirtualPrivateCloud
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "us-west-1c"
      Tags: 
      - Key: "Name"
        Value: !Sub "${AWS::StackName}-PrivateSubnet2"    
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref AppVirtualPrivateCloud

  PrivateRouteTableToSubnet1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateRouteTableToSubnet2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2   

  PrivateSubnetsNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref AppVirtualPrivateCloud
      Tags:
      - Key: "Name"
        Value: !Sub "${AWS::StackName}-PrivateSubnetsNacl"

  IngressPrivateAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetsNacl
      Egress: False
      RuleNumber: '100'
      Protocol: "-1"
      CidrBlock: 10.0.0.0/16   
      RuleAction: allow
      
  EgressPrivateAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetsNacl
      Egress: True
      RuleNumber: '100'
      Protocol: "-1"
      CidrBlock: 0.0.0.0/0   
      RuleAction: allow    


  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateSubnetsNacl
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateSubnetsNacl            

  PrivateServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "PrivateServerSecurityGroup"
      GroupDescription: "Security Group for Private Servers"
      VpcId: !Ref AppVirtualPrivateCloud 
  
Outputs:

  VpcID:
    Description: The ID for the stacks VPC
    Value: !Ref AppVirtualPrivateCloud
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"

  PublicSubnets:
    Description: Public Subnets
    Value: !Join
          - ','
          - - !Ref PublicSubnet1
            - !Ref PublicSubnet2
    Export:
        Name: !Sub "${AWS::StackName}-PublicSubnets"


  PrivateSubnets:
    Description: Private Subnets
    Value: !Join
        - ','
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
    Export:
        Name: !Sub "${AWS::StackName}-PrivateSubnets"          